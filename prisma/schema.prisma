generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String         @unique
  password          String
  image             String?
  bio               String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Comment           Comment[]
  Like              Like[]
  notifications     Notification[] @relation("UserNotifications")
  sentNotifications Notification[] @relation("NotificationSender")
  posts             Post[]
}

model Post {
  id            String         @id @default(cuid())
  title         String
  content       String
  description   String?        @db.Text
  companyName   String?
  difficulty    Difficulty?    @default(MEDIUM)
  slug          String         @unique
  published     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String
  category      String?
  tags          String[]
  image         String?
  views         Int            @default(0)
  Comment       Comment[]
  Like          Like[]
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id])
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  postId        String
  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  post          Post           @relation(fields: [postId], references: [id])
  notifications Notification[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  message     String
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  recipientId String
  senderId    String?
  postId      String?
  commentId   String?
  comment     Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  recipient   User             @relation("UserNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      User?            @relation("NotificationSender", fields: [senderId], references: [id])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
